let is_some = ((function | Some _ -> true | _ -> false)[@warning "-11"])
let () = assert (is_some (Some 1))
let () = assert (not (is_some None))
let is_none = ((function | None -> true | _ -> false)[@warning "-11"])
let () = assert (is_none None)
let () = assert (not (is_none (Some 1)))
let is_positive_int = ((function | x when x > 0 -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_positive_int 5)
let () = assert (not (is_positive_int (-1)))
let is_even_some =
  ((function | Some x when (x mod 2) = 0 -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_even_some (Some 4))
let () = assert (not (is_even_some (Some 3)))
let () = assert (not (is_even_some None))
let is_positive_tuple =
  ((function | (x, y) when (x > 0) && (y > 0) -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_positive_tuple (1, 2))
let () = assert (not (is_positive_tuple ((-1), 2)))
let () = assert (not (is_positive_tuple (1, (-2))))
let is_answer = ((function | 42 -> true | _ -> false)[@warning "-11"])
let () = assert (is_answer 42)
let () = assert (not (is_answer 41))
let is_hello = ((function | "hello" -> true | _ -> false)[@warning "-11"])
let () = assert (is_hello "hello")
let () = assert (not (is_hello "world"))
let is_small_digit = ((function | 0 | 1 | 2 | 3 -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_small_digit 2)
let () = assert (not (is_small_digit 5))
let is_pair_array = ((function | [|_;_|] -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_pair_array [|1;2|])
let () = assert (not (is_pair_array [|1;2;3|]))
type point = {
  x: int ;
  y: int }
let is_origin = ((function | { x = 0; y = 0 } -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_origin { x = 0; y = 0 })
let () = assert (not (is_origin { x = 1; y = 0 }))
let is_on_x_axis = ((function | { x = _; y = 0 } -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_on_x_axis { x = 5; y = 0 })
let () = assert (not (is_on_x_axis { x = 5; y = 1 }))
let is_nested_some_pair = ((function | Some (_, 42) -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_nested_some_pair (Some (1, 42)))
let () = assert (not (is_nested_some_pair (Some (1, 43))))
let () = assert (not (is_nested_some_pair None))
let is_lazy = ((function | (lazy _) -> true | _ -> false)[@warning "-11"])
let lazy_val = lazy 123
let () = assert (is_lazy lazy_val)
let is_letter = ((function | 'a'..'z' | 'A'..'Z' -> true | _ -> false)
  [@warning "-11"])
let () = assert (is_letter 'f')
let () = assert (is_letter 'Z')
let () = assert (not (is_letter '1'))
let is_int = ((function | (_ : int) -> true | _ -> false)[@warning "-11"])
let () = assert (is_int 42)
